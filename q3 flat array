// solution 1: dfs recursively
function flat(arr, depth = 1) {
  let res = [];
  arr.forEach(val => {
    if (Array.isArray(val) && depth >=1) {
      const todo = flat(val, depth-1);
      res = res.concat(todo);
    } else {
      res.push(val);
    }
  })
  return res;
}


或者这个版本稍微简练点。但是最初值arr必须是array不然就有问题
function flat(arr, depth = 1) {
  if (!Array.isArray(arr) || depth < 0) return [arr];
  let res = [];
  arr.forEach(ele => {
    res.push(...flat(ele, depth - 1));
  })

  return res;
}





// solution 2: bfs
/**
 * @param { Array } arr
 * @param { number } depth
 */
function flat(arr, depth = 1) {
  let res = arr.slice();
  while (depth >=1) {
    let newArr = res.slice();
    res = [];
    let hasArr = false;
    newArr.forEach(val => {
      if (Array.isArray(val)) {
        res.push(...val);
        hasArr = true;
      }else {
        res.push(val);
      }
    }); 
    if (!hasArr) break;
    depth--;
  }
  return res;
}

// solution 3: dfs with stack. reverse the arr before return
/**
 * @param { Array } arr
 * @param { number } depth
 */
function flat(arr, depth = 1) {
  const res = [];
  const stack = arr.map(ele => [ele, depth]);
  while(stack.length > 0) {
     const [ele, dep] = stack.pop();

      if (Array.isArray(ele) && dep > 0) {
        ele.forEach(e => {
          stack.push([e, dep -1]);
        })
      } else res.push(ele);
  }
  return res.reverse();
}

with reduce。一个比较简练的版本
function flat(arr, depth = 1) {
  if (depth > 0) {
    return arr.reduce((a, v) => 
      [...a, ...(Array.isArray(v) ? flat(v, depth--) : [v])], []
      )
  }
  return arr;
}

/******************* 注意，这个版本是没有depth版本的，flat到底。面试专用****************、
function flat(arr, depth = 1) {
  const stack = arr;
  const res = [];
  
  while(stack.length > 0) {
    const curr = stack.pop();
    if (Array.isArray(curr)) {
      stack.push(...curr);
    } else {
      res.push(curr);
    }
    depth--;
  }

  return res.reverse();
}

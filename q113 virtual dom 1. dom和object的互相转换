/**
 * @param {HTMLElement} 
 * @return {object} object literal presentation
 */

function virtualize(dom) {
  if (dom.nodeType === 3) return dom.textContent;
  const temp = {
    type: dom.nodeName.toLowerCase(),
    props: {}
  };
  // write all attributes
  for (attr of dom.attributes) {
    if (attr.nodeName === 'class') {
      temp.props['className'] = attr.textContent;
    }else temp.props[attr.nodeName] = attr.textContent;
  }
  // write all children
  if (dom.childNodes.length > 0) {
    temp.props.children = [];
    for (const child of dom.childNodes) {
      temp.props.children.push(virtualize(child));
    }
    if (temp.props.children.length === 1) {
      temp.props.children = temp.props.children[0];
    }
  } 
  return temp;
}


/**
 * @param {object} valid object literal presentation
 * @return {HTMLElement} 
 */
function render(obj) {
  if (typeof obj === 'string') {
    return document.createTextNode(obj);
  }
  console.log('obj', obj);
  let curr = document.createElement(obj.type);
  for (let prop in obj.props) {
    if (prop === 'children' && Array.isArray(obj.props[prop])) {
        for (const child of obj.props[prop]) {
          curr.appendChild(render(child))
        }
    } else if (prop === 'children') {
       curr.appendChild(render(obj.props[prop]));
    }
    else {
      if (prop === 'className') curr.setAttributeNS(null, 'className', obj.props[prop])
      else curr.setAttribute(prop, obj.props[prop])
    }
  }
  return curr;
}

// jser更简练的版本
可以学习的地方是：1. object construct. const {...} = json;
2. setAttribute可以直接dom[attr] = 'value';
3. 区分children是array还是string，其实只要把string变成[string]就可以遍历。这样会比较节省code
/**
 * @param {HTMLElement} 
 * @return {object} JSON presentation
 */
function virtualize(element) {
  // virtualize top level element
  // recursively handle the children (childNodes)
  const result = {
    type: element.tagName.toLowerCase(),
    props: {}
  }
  // props (without children)
  for (let attr of element.attributes) {
    const name = attr.name === 'class' ? 'className' : attr.name
    result.props[name] = attr.value
  }
  // children
  const children = []
  for (let node of element.childNodes) {
    if (node.nodeType === 3) { // text node
      children.push(node.textContent)
    } else {
      children.push(virtualize(node))
    }
  }
  
  result.props.children = children.length === 1 ? children[0] : children
  
  return result
}


/**
 * @param {object} valid JSON presentation
 * @return {HTMLElement} 
 */
function render(json) {
  // create the top level emlement
  // recursively append the children
  // textnode
  if (typeof json === 'string') {
    return document.createTextNode(json)
  }
  
  // element
  const {type, props: {children, ...attrs}} = json
  const element = document.createElement(type)
  
  for (let [attr, value] of Object.entries(attrs)) {
    element[attr] = value
  }
  
  const childrenArr = Array.isArray(children) ? children : [children]
  
  for (let child of childrenArr) {
    element.append(render(child))
  }
  
  return element
}

/**
 * @param {any} data
 * @param {Object} command
 */
function update(data, command) {
  // $push, $set, $merge, $apply(modify in place)
  const options = ['$push', '$set', '$merge', '$apply'];
  const helper = (currObj, currCommand, prevObjectKey) => {
    Object.keys(currCommand).map(keyName => {
   
    if (!options.includes(keyName)) {
      if (Array.isArray(currObj)) {
        let numberKeyName = Number(prevObjectKey);
        if (prevObjectKey) helper(currObj[numberKeyName], currCommand[keyName], numberKeyName);
        else helper(currObj, currCommand[keyName], keyName);
      } else {
          if (prevObjectKey) helper(currObj[prevObjectKey], currCommand[keyName], keyName); 
          else helper(currObj, currCommand[keyName], keyName);
      }
    }
     

    if (keyName === '$push') {
      if (prevObjectKey) {
      if (!Array.isArray(currObj[prevObjectKey])) throw new Error('Data type not allowed.')
      currObj[prevObjectKey] = [...currObj[prevObjectKey], ...currCommand[keyName]];
      } else {
        if (!Array.isArray(currObj)) throw new Error('Data type not allowed.')
        data = [...currObj, ...currCommand[keyName]];
      }
    }

    if (keyName === '$set') {
      currObj[prevObjectKey] = currCommand[keyName];
    }

    if (keyName === '$merge') {
      if (typeof currObj[prevObjectKey] !== 'object') throw new Error('Data type not allowed.');
      Object.assign(currObj[prevObjectKey], currCommand[keyName]);
    }

    if (keyName === '$apply') {
      currObj[prevObjectKey] = currCommand[keyName].call(this, currObj[prevObjectKey]);
    }
    return;
    })
  }

  helper(data, command, null);
  return data;
}

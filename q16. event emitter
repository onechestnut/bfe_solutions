// please complete the implementation
class EventEmitter {
  constructor() {
    this.emitterMap = {};
  }
  subscribe(eventName, callback) {
  	if (this.emitterMap[eventName]) this.emitterMap[eventName].push(callback);
    else {
      this.emitterMap[eventName] = [callback];
    }
    const index = this.emitterMap[eventName].length - 1; // remember the place. and just delete the element, not spice. so we remeber which instance already called release

    return {
      release: () => {
        delete this.emitterMap[eventName][index];
      }
    }
  }
  
  emit(eventName, ...args) {
    for (const fn of this.emitterMap[eventName]) {
      if (fn) fn.apply(this, args); // can be empty in array due to release
    }
  }
}

/********上一版的改进版，用map而不是简单object ***********/
class EventEmitter {
  constructor() {
    this.emitterMap = new Map();
  }
  subscribe(eventName, callback) {
  	if (this.emitterMap.has(eventName)) this.emitterMap.get(eventName).push(callback);
    else {
      this.emitterMap.set(eventName, [callback]);
    }
    const index = this.emitterMap.get(eventName).length - 1;

    return {
      release: () => {
        delete this.emitterMap.get(eventName)[index];
      }
    }
  }
  
  emit(eventName, ...args) {
    for (const fn of this.emitterMap.get(eventName)) {
      if (fn) fn.apply(this, args);
    }
  }
}

/********** better version with map.event作为key，value是一个map。这里面map的key是callback，value是数字，表示有几次这个callback。但是没有可以确定release可以确定的release哪一个instance **************/
// please complete the implementation
class EventEmitter {
  constructor() {
    this.emitterMap = {};
  }
  subscribe(eventName, callback) {
  	if (this.emitterMap[eventName]) {
        this.emitterMap[eventName].set(callback, (this.emitterMap[eventName].get(callback) || 0) + 1)
    }
    else {
      this.emitterMap[eventName] = new Map();
      this.emitterMap[eventName].set(callback, 1);
    }

    return {
      release: ()  => {
        const currCount = this.emitterMap[eventName].get(callback);
        if (currCount <= 1) this.emitterMap[eventName].delete(callback);
        else this.emitterMap[eventName].set(callback, currCount - 1);
      }
    }
  }
  
  emit(eventName, ...args) {
    for (const [fn, count] of this.emitterMap[eventName]) {
      let index = 1;
      while(index <= count) {
        fn.apply(this, args);
        index++;
      }
    }
  }
}

/*************** 用map做emittermap，稍微改进了一下上一个版本**********************/
class EventEmitter {
  constructor() {
    this.emitterMap = new Map();
  }
  subscribe(eventName, callback) {
  	if (this.emitterMap.has(eventName)) {
        this.emitterMap.get(eventName).set(callback, (this.emitterMap.get(eventName).get(callback) || 0) + 1)
    }
    else {
      this.emitterMap.set(eventName, new Map());
      this.emitterMap.get(eventName).set(callback, 1);
    }

    return {
      release: ()  => {
        const currCount = this.emitterMap.get(eventName).get(callback);
        if (currCount <= 1) this.emitterMap.get(eventName).delete(callback);
        else this.emitterMap.get(eventName).set(callback, currCount - 1);
      }
    }
  }
  
  emit(eventName, ...args) {
    for (const [fn, count] of this.emitterMap.get(eventName)) {
      let index = 1;
      while(index <= count) {
        fn.apply(this, args);
        index++;
      }
    }
  }
}

/*********** 简单粗暴版本，用array。每次release的时候，filter掉callback相符的element***************/
class EventEmitter {
  constructor() {
    this.emitterMap = {};
  }

  subscribe(eventName, callback) {
    this.emitterMap[eventName] = this.emitterMap[eventName] || [];
    this.emitterMap[eventName].push(callback);
    return {
      release: () => {
        this.emitterMap[eventName] = this.emitterMap[eventName].filter((cb) => cb !== callback);
      }
    }
  }
  
  emit(eventName, ...args) {
    if (this.emitterMap[eventName]) {
      this.emitterMap[eventName].forEach((callback) => callback(...args));
    }
  }
}

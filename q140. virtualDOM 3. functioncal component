/**
 * MyElement is the type your implementation supports
 *
 * type MyNode = MyElement | string
 * type FunctionComponent = (props: object) => MyElement
 */

/**
 * @param { string | FunctionComponent } type - valid HTML tag name or Function Component
 * @param { object } [props] - properties.
 * @param { ...MyNode} [children] - elements as rest arguments
 * @return { MyElement }
 */
function createElement(type, props, ...children) {
  if (typeof type ==='function') {
    return type({...props, children});
  }

  const obj = {
    type,
    props: props || {},
    children,
  };
  
  return obj;
}


/**
 * @param { MyElement }
 * @returns { HTMLElement } 
 */
function render(myElement) { // my element is the json
  if (typeof myElement === 'string') return document.createTextNode(myElement);
  
  let {type, props, children = []} = myElement;
  const dom = document.createElement(type);

  // props
  Object.keys(props).forEach(prop => {
    if (prop === 'className') dom.setAttribute('class', props[prop]);
    else dom.setAttribute(prop, props[prop]);
  })

  // children
  children = Array.isArray(children) ? children : [children];
  children.forEach(child => {
    dom.appendChild(render(child));
  })

  return dom;
}
